{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\nimport { useGrid } from './GridContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createClusteredGrid = (rows, cols, targetAlivePercentage = 0.075) => {\n  const grid = createEmptyGrid(rows, cols);\n  let totalCells = rows * cols;\n  let targetAliveCells = Math.floor(totalCells * targetAlivePercentage);\n  let currentAliveCount = 0;\n  while (currentAliveCount < targetAliveCells) {\n    let row = Math.floor(Math.random() * rows);\n    let col = Math.floor(Math.random() * cols);\n\n    // Ensure we're creating a cluster around an initially dead cell\n    if (grid[row][col].alive === 0) {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          let newRow = row + i;\n          let newCol = col + j;\n          // Check bounds and whether activating the cell would exceed the target\n          if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && currentAliveCount < targetAliveCells) {\n            // Randomly decide to activate the cell to create more natural clusters\n            if (Math.random() > 0.5) {\n              if (grid[newRow][newCol].alive === 0) {\n                grid[newRow][newCol] = {\n                  alive: 1,\n                  generation: 1\n                };\n                currentAliveCount++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return {\n    grid,\n    livingCellsCount: currentAliveCount\n  };\n};\nconst Cell = ({\n  cell,\n  onClick\n}) => {\n  // 设置HSL颜色的基础值\n  const hue = 331; // 约等于#e0b1cb的色相\n  const saturation = 60; // 饱和度\n  let lightness = 83; // 亮度\n\n  // 如果细胞活着，根据其generation减少亮度，以实现颜色加深的效果\n  if (cell.alive) {\n    // 每代使颜色更暗5%，但不低于30%的亮度\n    lightness = Math.max(lightness - cell.generation * 5, 30);\n  }\n  const backgroundColor = cell.alive ? `hsl(${hue}, ${saturation}%, ${lightness}%)` : \"#eee\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: `cell ${cell.alive ? 'alive' : 'dead'}`,\n    style: {\n      backgroundColor\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n};\n_c = Cell;\nconst Grid = ({\n  grid,\n  toggleCellState\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-board\",\n  style: {\n    gridTemplateColumns: `repeat(${grid[0].length}, 20px)`\n  },\n  children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n    cell: cell,\n    onClick: () => toggleCellState(i, j)\n  }, `${i}-${j}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this)))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 3\n}, this);\n_c2 = Grid;\nconst LivingCellsCounter = ({\n  count\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"living-cells-count\",\n  children: [\"Living Cells: \", count]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 78,\n  columnNumber: 3\n}, this);\n_c3 = LivingCellsCounter;\nconst ControlPanel = ({\n  onStartStop,\n  onNext,\n  onReset,\n  isPlaying\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"buttons-row\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onStartStop,\n    children: isPlaying ? \"Stop\" : \"Autoplay\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onNext,\n    children: \"Next Frame\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onReset,\n    children: \"Reset Grid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 3\n}, this);\n_c4 = ControlPanel;\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [inputValues, setInputValues] = useState({\n    rows: '',\n    cols: ''\n  });\n\n  // Initialize the grid and living cell count using createClusteredGrid\n  const initialGridData = createClusteredGrid(defaultSize, defaultSize);\n  const [gridState, setGridState] = useState(initialGridData.grid);\n  const [livingCount, setLivingCount] = useState(initialGridData.livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({\n      ...inputValues,\n      [dimension]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({\n        rows,\n        cols\n      });\n      const newGridData = createClusteredGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    newGrid[row][col].generation = newGrid[row][col].alive ? 1 : 0; // Reset generation when toggling\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n  const nextGeneration = useCallback(() => {\n    setGridState(currentGrid => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          const cell = currentGrid[i][j];\n          if (cell.alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = {\n                alive: 0,\n                generation: 0\n              };\n            } else {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: cell.generation + 1\n              };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: 1\n              };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = cell;\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(nextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n  const resetGrid = () => {\n    const {\n      grid,\n      livingCellsCount\n    } = createClusteredGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Rows (default size: 20)\",\n          value: inputValues.rows,\n          onChange: e => handleSizeChange(e, 'rows')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Cols (default size: 20)\",\n          value: inputValues.cols,\n          onChange: e => handleSizeChange(e, 'cols')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Grid Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), inputError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: inputError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LivingCellsCounter, {\n      count: livingCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: gridState,\n      toggleCellState: toggleCellState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onStartStop: () => setIsPlaying(!isPlaying),\n      onNext: nextGeneration,\n      onReset: resetGrid,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"2XeMmbqVsBm0vTec5HSWof01y9I=\");\n_c5 = GamePage;\nexport default GamePage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"LivingCellsCounter\");\n$RefreshReg$(_c4, \"ControlPanel\");\n$RefreshReg$(_c5, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","useGrid","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createClusteredGrid","targetAlivePercentage","grid","totalCells","targetAliveCells","Math","floor","currentAliveCount","row","random","col","i","j","newRow","newCol","livingCellsCount","Cell","cell","onClick","hue","saturation","lightness","max","backgroundColor","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","toggleCellState","gridTemplateColumns","children","_c2","LivingCellsCounter","count","_c3","ControlPanel","onStartStop","onNext","onReset","isPlaying","_c4","GamePage","_s","defaultSize","gridSize","setGridSize","inputValues","setInputValues","initialGridData","gridState","setGridState","livingCount","setLivingCount","inputError","setInputError","setIsPlaying","playRef","current","handleSizeChange","e","dimension","target","value","handleSubmit","preventDefault","parseInt","newGridData","newGrid","JSON","parse","stringify","flat","filter","nextGeneration","currentGrid","newLivingCellsCount","liveNeighbors","neighbors","forEach","x","y","interval","setInterval","clearInterval","resetGrid","onSubmit","type","placeholder","onChange","_c5","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\nimport { useGrid } from './GridContext';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createClusteredGrid = (rows, cols, targetAlivePercentage = 0.075) => {\n    const grid = createEmptyGrid(rows, cols);\n    let totalCells = rows * cols;\n    let targetAliveCells = Math.floor(totalCells * targetAlivePercentage);\n\n    let currentAliveCount = 0;\n\n    while (currentAliveCount < targetAliveCells) {\n        let row = Math.floor(Math.random() * rows);\n        let col = Math.floor(Math.random() * cols);\n        \n        // Ensure we're creating a cluster around an initially dead cell\n        if (grid[row][col].alive === 0) {\n            for (let i = -1; i <= 1; i++) {\n                for (let j = -1; j <= 1; j++) {\n                    let newRow = row + i;\n                    let newCol = col + j;\n                    // Check bounds and whether activating the cell would exceed the target\n                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && currentAliveCount < targetAliveCells) {\n                        // Randomly decide to activate the cell to create more natural clusters\n                        if (Math.random() > 0.5) {\n                            if (grid[newRow][newCol].alive === 0) {\n                                grid[newRow][newCol] = { alive: 1, generation: 1 };\n                                currentAliveCount++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return { grid, livingCellsCount: currentAliveCount };\n};\n\nconst Cell = ({ cell, onClick }) => {\n    // 设置HSL颜色的基础值\n    const hue = 331; // 约等于#e0b1cb的色相\n    const saturation = 60; // 饱和度\n    let lightness = 83; // 亮度\n  \n    // 如果细胞活着，根据其generation减少亮度，以实现颜色加深的效果\n    if (cell.alive) {\n      // 每代使颜色更暗5%，但不低于30%的亮度\n      lightness = Math.max(lightness - cell.generation * 5, 30);\n    }\n  \n    const backgroundColor = cell.alive ? `hsl(${hue}, ${saturation}%, ${lightness}%)` : \"#eee\";\n  \n    return (\n      <div\n        onClick={onClick}\n        className={`cell ${cell.alive ? 'alive' : 'dead'}`}\n        style={{ backgroundColor }}\n      />\n    );\n  };\n  \nconst Grid = ({ grid, toggleCellState }) => (\n  <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n    {grid.map((row, i) =>\n      row.map((cell, j) => (\n        <Cell key={`${i}-${j}`} cell={cell} onClick={() => toggleCellState(i, j)} />\n      ))\n    )}\n  </div>\n);\n\nconst LivingCellsCounter = ({ count }) => (\n  <div className=\"living-cells-count\">Living Cells: {count}</div>\n);\n\nconst ControlPanel = ({ onStartStop, onNext, onReset, isPlaying }) => (\n  <div className=\"buttons-row\">\n    <button onClick={onStartStop}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n    <button onClick={onNext}>Next Frame</button>\n    <button onClick={onReset}>Reset Grid</button>\n  </div>\n);\n\nconst GamePage = () => {\n    const defaultSize = 20;\n    const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n    const [inputValues, setInputValues] = useState({ rows: '', cols: '' });\n    \n    // Initialize the grid and living cell count using createClusteredGrid\n    const initialGridData = createClusteredGrid(defaultSize, defaultSize);\n    const [gridState, setGridState] = useState(initialGridData.grid);\n    const [livingCount, setLivingCount] = useState(initialGridData.livingCellsCount);\n    \n    const [inputError, setInputError] = useState('');\n    const [isPlaying, setIsPlaying] = useState(false);\n    const playRef = useRef(isPlaying);\n    playRef.current = isPlaying;\n\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({ ...inputValues, [dimension]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({ rows, cols });\n      const newGridData = createClusteredGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    newGrid[row][col].generation = newGrid[row][col].alive ? 1 : 0; // Reset generation when toggling\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n\n  const nextGeneration = useCallback(() => {\n    setGridState((currentGrid) => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i       = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [\n            [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n            [i, j - 1], [i, j + 1],\n            [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n          ];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          const cell = currentGrid[i][j];\n          if (cell.alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = { alive: 0, generation: 0 };\n            } else {\n              newGrid[i][j] = { alive: 1, generation: cell.generation + 1 };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = { alive: 1, generation: 1 };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = cell;\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(nextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n\n  const resetGrid = () => {\n    const { grid, livingCellsCount } = createClusteredGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n\n  return (\n    <div className=\"game-page\">\n      <div className=\"form-group\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Rows (default size: 20)\"\n            value={inputValues.rows}\n            onChange={e => handleSizeChange(e, 'rows')}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Cols (default size: 20)\"\n            value={inputValues.cols}\n            onChange={e => handleSizeChange(e, 'cols')}\n          />\n          <button type=\"submit\">Update Grid Size</button>\n        </form>\n        {inputError && <div className=\"error-message\">{inputError}</div>}\n      </div>\n      <LivingCellsCounter count={livingCount} />\n      <Grid grid={gridState} toggleCellState={toggleCellState} />\n      <ControlPanel onStartStop={() => setIsPlaying(!isPlaying)} onNext={nextGeneration} onReset={resetGrid} isPlaying={isPlaying} />\n    </div>\n  );\n};\n\nexport default GamePage;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAO,gBAAgB;AACvB,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACtC,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAK,CAAC,CAAC,CAACK,GAAG,CAAC,MAAMH,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEH;EAAK,CAAC,CAAC,CAACK,IAAI,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,UAAU,EAAE;EAAE,CAAC,CAAC,CAAC;AAC/G,CAAC;AAED,MAAMC,mBAAmB,GAAGA,CAACT,IAAI,EAAEC,IAAI,EAAES,qBAAqB,GAAG,KAAK,KAAK;EACvE,MAAMC,IAAI,GAAGZ,eAAe,CAACC,IAAI,EAAEC,IAAI,CAAC;EACxC,IAAIW,UAAU,GAAGZ,IAAI,GAAGC,IAAI;EAC5B,IAAIY,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,GAAGF,qBAAqB,CAAC;EAErE,IAAIM,iBAAiB,GAAG,CAAC;EAEzB,OAAOA,iBAAiB,GAAGH,gBAAgB,EAAE;IACzC,IAAII,GAAG,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGlB,IAAI,CAAC;IAC1C,IAAImB,GAAG,GAAGL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGjB,IAAI,CAAC;;IAE1C;IACA,IAAIU,IAAI,CAACM,GAAG,CAAC,CAACE,GAAG,CAAC,CAACZ,KAAK,KAAK,CAAC,EAAE;MAC5B,KAAK,IAAIa,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,IAAIC,MAAM,GAAGL,GAAG,GAAGG,CAAC;UACpB,IAAIG,MAAM,GAAGJ,GAAG,GAAGE,CAAC;UACpB;UACA,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGtB,IAAI,IAAIuB,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGtB,IAAI,IAAIe,iBAAiB,GAAGH,gBAAgB,EAAE;YACtG;YACA,IAAIC,IAAI,CAACI,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;cACrB,IAAIP,IAAI,CAACW,MAAM,CAAC,CAACC,MAAM,CAAC,CAAChB,KAAK,KAAK,CAAC,EAAE;gBAClCI,IAAI,CAACW,MAAM,CAAC,CAACC,MAAM,CAAC,GAAG;kBAAEhB,KAAK,EAAE,CAAC;kBAAEC,UAAU,EAAE;gBAAE,CAAC;gBAClDQ,iBAAiB,EAAE;cACvB;YACJ;UACJ;QACJ;MACJ;IACJ;EACJ;EAEA,OAAO;IAAEL,IAAI;IAAEa,gBAAgB,EAAER;EAAkB,CAAC;AACxD,CAAC;AAED,MAAMS,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAChC;EACA,MAAMC,GAAG,GAAG,GAAG,CAAC,CAAC;EACjB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;EACvB,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;;EAEpB;EACA,IAAIJ,IAAI,CAACnB,KAAK,EAAE;IACd;IACAuB,SAAS,GAAGhB,IAAI,CAACiB,GAAG,CAACD,SAAS,GAAGJ,IAAI,CAAClB,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC;EAC3D;EAEA,MAAMwB,eAAe,GAAGN,IAAI,CAACnB,KAAK,GAAI,OAAMqB,GAAI,KAAIC,UAAW,MAAKC,SAAU,IAAG,GAAG,MAAM;EAE1F,oBACEhC,OAAA;IACE6B,OAAO,EAAEA,OAAQ;IACjBM,SAAS,EAAG,QAAOP,IAAI,CAACnB,KAAK,GAAG,OAAO,GAAG,MAAO,EAAE;IACnD2B,KAAK,EAAE;MAAEF;IAAgB;EAAE;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEN,CAAC;AAACC,EAAA,GArBEd,IAAI;AAuBV,MAAMe,IAAI,GAAGA,CAAC;EAAE7B,IAAI;EAAE8B;AAAgB,CAAC,kBACrC3C,OAAA;EAAKmC,SAAS,EAAC,YAAY;EAACC,KAAK,EAAE;IAAEQ,mBAAmB,EAAG,UAAS/B,IAAI,CAAC,CAAC,CAAC,CAACP,MAAO;EAAS,CAAE;EAAAuC,QAAA,EAC3FhC,IAAI,CAACN,GAAG,CAAC,CAACY,GAAG,EAAEG,CAAC,KACfH,GAAG,CAACZ,GAAG,CAAC,CAACqB,IAAI,EAAEL,CAAC,kBACdvB,OAAA,CAAC2B,IAAI;IAAmBC,IAAI,EAAEA,IAAK;IAACC,OAAO,EAAEA,CAAA,KAAMc,eAAe,CAACrB,CAAC,EAAEC,CAAC;EAAE,GAA7D,GAAED,CAAE,IAAGC,CAAE,EAAC;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAqD,CAC5E,CACH;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACE,CACN;AAACM,GAAA,GARIJ,IAAI;AAUV,MAAMK,kBAAkB,GAAGA,CAAC;EAAEC;AAAM,CAAC,kBACnChD,OAAA;EAAKmC,SAAS,EAAC,oBAAoB;EAAAU,QAAA,GAAC,gBAAc,EAACG,KAAK;AAAA;EAAAX,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAM,CAC/D;AAACS,GAAA,GAFIF,kBAAkB;AAIxB,MAAMG,YAAY,GAAGA,CAAC;EAAEC,WAAW;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAU,CAAC,kBAC/DtD,OAAA;EAAKmC,SAAS,EAAC,aAAa;EAAAU,QAAA,gBAC1B7C,OAAA;IAAQ6B,OAAO,EAAEsB,WAAY;IAAAN,QAAA,EAAES,SAAS,GAAG,MAAM,GAAG;EAAU;IAAAjB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC,eACxExC,OAAA;IAAQ6B,OAAO,EAAEuB,MAAO;IAAAP,QAAA,EAAC;EAAU;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC,eAC5CxC,OAAA;IAAQ6B,OAAO,EAAEwB,OAAQ;IAAAR,QAAA,EAAC;EAAU;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC1C,CACN;AAACe,GAAA,GANIL,YAAY;AAQlB,MAAMM,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,WAAW,GAAG,EAAE;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlE,QAAQ,CAAC;IAAEQ,IAAI,EAAEwD,WAAW;IAAEvD,IAAI,EAAEuD;EAAY,CAAC,CAAC;EAClF,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGpE,QAAQ,CAAC;IAAEQ,IAAI,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC,CAAC;;EAEtE;EACA,MAAM4D,eAAe,GAAGpD,mBAAmB,CAAC+C,WAAW,EAAEA,WAAW,CAAC;EACrE,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGvE,QAAQ,CAACqE,eAAe,CAAClD,IAAI,CAAC;EAChE,MAAM,CAACqD,WAAW,EAAEC,cAAc,CAAC,GAAGzE,QAAQ,CAACqE,eAAe,CAACrC,gBAAgB,CAAC;EAEhF,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3E,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC4D,SAAS,EAAEgB,YAAY,CAAC,GAAG5E,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM6E,OAAO,GAAG1E,MAAM,CAACyD,SAAS,CAAC;EACjCiB,OAAO,CAACC,OAAO,GAAGlB,SAAS;EAE7B,MAAMmB,gBAAgB,GAAGA,CAACC,CAAC,EAAEC,SAAS,KAAK;IACzCb,cAAc,CAAC;MAAE,GAAGD,WAAW;MAAE,CAACc,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC;IAAM,CAAC,CAAC;EACjE,CAAC;EAED,MAAMC,YAAY,GAAIJ,CAAC,IAAK;IAC1BA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,MAAM7E,IAAI,GAAG8E,QAAQ,CAACnB,WAAW,CAAC3D,IAAI,EAAE,EAAE,CAAC,IAAIwD,WAAW;IAC1D,MAAMvD,IAAI,GAAG6E,QAAQ,CAACnB,WAAW,CAAC1D,IAAI,EAAE,EAAE,CAAC,IAAIuD,WAAW;IAC1D,IAAIxD,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,IAAIC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,EAAE;MACtDyD,WAAW,CAAC;QAAE1D,IAAI;QAAEC;MAAK,CAAC,CAAC;MAC3B,MAAM8E,WAAW,GAAGtE,mBAAmB,CAACT,IAAI,EAAEC,IAAI,CAAC;MACnD8D,YAAY,CAACgB,WAAW,CAACpE,IAAI,CAAC;MAC9BsD,cAAc,CAACc,WAAW,CAACvD,gBAAgB,CAAC;MAC5C2C,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,MAAM;MACLA,aAAa,CAAC,+DAA+D,CAAC;IAChF;EACF,CAAC;EAED,MAAM1B,eAAe,GAAGA,CAACxB,GAAG,EAAEE,GAAG,KAAK;IACpC,MAAM6D,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACrB,SAAS,CAAC,CAAC;IACrDkB,OAAO,CAAC/D,GAAG,CAAC,CAACE,GAAG,CAAC,CAACZ,KAAK,GAAGuD,SAAS,CAAC7C,GAAG,CAAC,CAACE,GAAG,CAAC,CAACZ,KAAK,GAAG,CAAC,GAAG,CAAC;IAC3DyE,OAAO,CAAC/D,GAAG,CAAC,CAACE,GAAG,CAAC,CAACX,UAAU,GAAGwE,OAAO,CAAC/D,GAAG,CAAC,CAACE,GAAG,CAAC,CAACZ,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChEwD,YAAY,CAACiB,OAAO,CAAC;IACrBf,cAAc,CAACe,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC3D,IAAI,IAAIA,IAAI,CAACnB,KAAK,CAAC,CAACH,MAAM,CAAC;EAClE,CAAC;EAED,MAAMkF,cAAc,GAAG7F,WAAW,CAAC,MAAM;IACvCsE,YAAY,CAAEwB,WAAW,IAAK;MAC5B,MAAMP,OAAO,GAAGjF,eAAe,CAAC0D,QAAQ,CAACzD,IAAI,EAAEyD,QAAQ,CAACxD,IAAI,CAAC;MAC7D,IAAIuF,mBAAmB,GAAG,CAAC;MAC3B,KAAK,IAAIpE,CAAC,GAAS,CAAC,EAAEA,CAAC,GAAGqC,QAAQ,CAACzD,IAAI,EAAEoB,CAAC,EAAE,EAAE;QAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,QAAQ,CAACxD,IAAI,EAAEoB,CAAC,EAAE,EAAE;UACtC,IAAIoE,aAAa,GAAG,CAAC;UACrB,MAAMC,SAAS,GAAG,CAChB,CAACtE,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EAAE,CAACD,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,EAAE,CAACD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EAC1C,CAACD,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EAAE,CAACD,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EACtB,CAACD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EAAE,CAACD,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,EAAE,CAACD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAC3C;UACDqE,SAAS,CAACC,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;YAC5B,IAAID,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGnC,QAAQ,CAACzD,IAAI,IAAI6F,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGpC,QAAQ,CAACxD,IAAI,EAAE;cAC9DwF,aAAa,IAAIF,WAAW,CAACK,CAAC,CAAC,CAACC,CAAC,CAAC,CAACtF,KAAK;YAC1C;UACF,CAAC,CAAC;UACF,MAAMmB,IAAI,GAAG6D,WAAW,CAACnE,CAAC,CAAC,CAACC,CAAC,CAAC;UAC9B,IAAIK,IAAI,CAACnB,KAAK,EAAE;YACd,IAAIkF,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAG,CAAC,EAAE;cAC1CT,OAAO,CAAC5D,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;gBAAEd,KAAK,EAAE,CAAC;gBAAEC,UAAU,EAAE;cAAE,CAAC;YAC7C,CAAC,MAAM;cACLwE,OAAO,CAAC5D,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;gBAAEd,KAAK,EAAE,CAAC;gBAAEC,UAAU,EAAEkB,IAAI,CAAClB,UAAU,GAAG;cAAE,CAAC;cAC7DgF,mBAAmB,EAAE;YACvB;UACF,CAAC,MAAM;YACL,IAAIC,aAAa,KAAK,CAAC,EAAE;cACvBT,OAAO,CAAC5D,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;gBAAEd,KAAK,EAAE,CAAC;gBAAEC,UAAU,EAAE;cAAE,CAAC;cAC3CgF,mBAAmB,EAAE;YACvB,CAAC,MAAM;cACLR,OAAO,CAAC5D,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGK,IAAI;YACtB;UACF;QACF;MACF;MACAuC,cAAc,CAACuB,mBAAmB,CAAC;MACnC,OAAOR,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EAEd/D,SAAS,CAAC,MAAM;IACd,IAAI0D,SAAS,EAAE;MACb,MAAM0C,QAAQ,GAAGC,WAAW,CAACT,cAAc,EAAE,GAAG,CAAC;MACjD,OAAO,MAAMU,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAAC1C,SAAS,EAAEkC,cAAc,CAAC,CAAC;EAE/B,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAM;MAAEtF,IAAI;MAAEa;IAAiB,CAAC,GAAGf,mBAAmB,CAACgD,QAAQ,CAACzD,IAAI,EAAEyD,QAAQ,CAACxD,IAAI,CAAC;IACpF8D,YAAY,CAACpD,IAAI,CAAC;IAClBsD,cAAc,CAACzC,gBAAgB,CAAC;EAClC,CAAC;EAED,oBACE1B,OAAA;IAAKmC,SAAS,EAAC,WAAW;IAAAU,QAAA,gBACxB7C,OAAA;MAAKmC,SAAS,EAAC,YAAY;MAAAU,QAAA,gBACzB7C,OAAA;QAAMoG,QAAQ,EAAEtB,YAAa;QAAAjC,QAAA,gBAC3B7C,OAAA;UACEqG,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,yBAAyB;UACrCzB,KAAK,EAAEhB,WAAW,CAAC3D,IAAK;UACxBqG,QAAQ,EAAE7B,CAAC,IAAID,gBAAgB,CAACC,CAAC,EAAE,MAAM;QAAE;UAAArC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACFxC,OAAA;UACEqG,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,yBAAyB;UACrCzB,KAAK,EAAEhB,WAAW,CAAC1D,IAAK;UACxBoG,QAAQ,EAAE7B,CAAC,IAAID,gBAAgB,CAACC,CAAC,EAAE,MAAM;QAAE;UAAArC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACFxC,OAAA;UAAQqG,IAAI,EAAC,QAAQ;UAAAxD,QAAA,EAAC;QAAgB;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,EACN4B,UAAU,iBAAIpE,OAAA;QAAKmC,SAAS,EAAC,eAAe;QAAAU,QAAA,EAAEuB;MAAU;QAAA/B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,eACNxC,OAAA,CAAC+C,kBAAkB;MAACC,KAAK,EAAEkB;IAAY;MAAA7B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1CxC,OAAA,CAAC0C,IAAI;MAAC7B,IAAI,EAAEmD,SAAU;MAACrB,eAAe,EAAEA;IAAgB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3DxC,OAAA,CAACkD,YAAY;MAACC,WAAW,EAAEA,CAAA,KAAMmB,YAAY,CAAC,CAAChB,SAAS,CAAE;MAACF,MAAM,EAAEoC,cAAe;MAACnC,OAAO,EAAE8C,SAAU;MAAC7C,SAAS,EAAEA;IAAU;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5H,CAAC;AAEV,CAAC;AAACiB,EAAA,CAxHID,QAAQ;AAAAgD,GAAA,GAARhD,QAAQ;AA0Hd,eAAeA,QAAQ;AAAC,IAAAf,EAAA,EAAAK,GAAA,EAAAG,GAAA,EAAAM,GAAA,EAAAiD,GAAA;AAAAC,YAAA,CAAAhE,EAAA;AAAAgE,YAAA,CAAA3D,GAAA;AAAA2D,YAAA,CAAAxD,GAAA;AAAAwD,YAAA,CAAAlD,GAAA;AAAAkD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
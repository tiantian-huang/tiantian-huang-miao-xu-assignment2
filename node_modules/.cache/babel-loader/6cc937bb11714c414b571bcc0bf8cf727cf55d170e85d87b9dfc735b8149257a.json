{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './GamePage.css';\n\n// Helper function to create an empty grid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill(0));\n};\n\n// Helper function to create a grid with random live cells\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j] = Math.random() < 0.05 ? 1 : 0; // 5% chance of being alive\n    }\n  }\n  return grid;\n};\nconst GamePage = () => {\n  _s();\n  const [grid, setGrid] = useState(() => createRandomGrid(20, 20));\n  const [rows, setRows] = useState(20);\n  const [cols, setCols] = useState(20);\n\n  // Toggle cell state\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col] = grid[row][col] ? 0 : 1;\n    setGrid(newGrid);\n  };\n  const nextGeneration = useCallback(() => {\n    setGrid(currentGrid => {\n      const newGrid = createEmptyGrid(rows, cols);\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n\n          // Count live neighbors\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < rows && y >= 0 && y < cols) {\n              liveNeighbors += currentGrid[x][y];\n            }\n          });\n\n          // Apply the rules of the Game\n          if (currentGrid[i][j] === 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {\n            newGrid[i][j] = 0; // Cell dies\n          } else if (currentGrid[i][j] === 0 && liveNeighbors === 3) {\n            newGrid[i][j] = 1; // Cell becomes alive\n          } else {\n            newGrid[i][j] = currentGrid[i][j]; // Stays the same\n          }\n        }\n      }\n      return newGrid;\n    });\n  }, [rows, cols]);\n\n  // Reset grid to random state\n  const resetGrid = () => {\n    setGrid(createRandomGrid(rows, cols));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleCellState(i, j),\n        className: `cell ${cell ? 'alive' : 'dead'}`\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextGeneration,\n      children: \"Next Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGrid,\n      children: \"Reset Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"yAuNJ19fgglkvxyPFy3Lo6LaTfI=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","createRandomGrid","grid","i","j","Math","random","GamePage","_s","setGrid","setRows","setCols","toggleCellState","row","col","newGrid","JSON","parse","stringify","nextGeneration","currentGrid","liveNeighbors","neighbors","forEach","x","y","resetGrid","className","children","cell","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './GamePage.css';\n\n// Helper function to create an empty grid\nconst createEmptyGrid = (rows, cols) => {\n    return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill(0));\n};\n\n// Helper function to create a grid with random live cells\nconst createRandomGrid = (rows, cols) => {\n    const grid = createEmptyGrid(rows, cols);\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            grid[i][j] = Math.random() < 0.05 ? 1 : 0; // 5% chance of being alive\n        }\n    }\n    return grid;\n};\n\nconst GamePage = () => {\n    const [grid, setGrid] = useState(() => createRandomGrid(20, 20));\n    const [rows, setRows] = useState(20);\n    const [cols, setCols] = useState(20);\n\n    // Toggle cell state\n    const toggleCellState = (row, col) => {\n        const newGrid = JSON.parse(JSON.stringify(grid));\n        newGrid[row][col] = grid[row][col] ? 0 : 1;\n        setGrid(newGrid);\n    };\n\n    const nextGeneration = useCallback(() => {\n        setGrid((currentGrid) => {\n            const newGrid = createEmptyGrid(rows, cols);\n            for (let i = 0; i < rows; i++) {\n                for (let j = 0; j < cols; j++) {\n                    let liveNeighbors = 0;\n                    const neighbors = [\n                        [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n                        [i, j - 1],               [i, j + 1],\n                        [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n                    ];\n    \n                    // Count live neighbors\n                    neighbors.forEach(([x, y]) => {\n                        if (x >= 0 && x < rows && y >= 0 && y < cols) {\n                            liveNeighbors += currentGrid[x][y];\n                        }\n                    });\n    \n                    // Apply the rules of the Game\n                    if (currentGrid[i][j] === 1 && (liveNeighbors < 2 || liveNeighbors > 3)) {\n                        newGrid[i][j] = 0; // Cell dies\n                    } else if (currentGrid[i][j] === 0 && liveNeighbors === 3) {\n                        newGrid[i][j] = 1; // Cell becomes alive\n                    } else {\n                        newGrid[i][j] = currentGrid[i][j]; // Stays the same\n                    }\n                }\n            }\n            return newGrid;\n        });\n    }, [rows, cols]);\n    \n\n    // Reset grid to random state\n    const resetGrid = () => {\n        setGrid(createRandomGrid(rows, cols));\n    };\n\n    return (\n        <div className=\"game-page\">\n            <div className=\"game-board\">\n                {grid.map((row, i) =>\n                    row.map((cell, j) => (\n                        <div\n                            key={`${i}-${j}`}\n                            onClick={() => toggleCellState(i, j)}\n                            className={`cell ${cell ? 'alive' : 'dead'}`}\n                        />\n                    ))\n                )}\n            </div>\n            <button onClick={nextGeneration}>Next Generation</button>\n            <button onClick={resetGrid}>Reset Grid</button>\n        </div>\n    );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\n\n// Helper functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = {\n        alive: isAlive,\n        generation: 0\n      };\n      livingCellsCount += isAlive;\n    }\n  }\n  return {\n    grid,\n    livingCellsCount\n  };\n};\n\n// Cell Component\nconst Cell = ({\n  alive,\n  onClick\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  onClick: onClick,\n  className: `cell ${alive ? 'alive' : 'dead'}`,\n  style: {\n    backgroundColor: alive ? `hsl(${Math.min(120, alive * 12)}, 100%, 50%)` : undefined\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 3\n}, this);\n\n// Grid Component\n_c = Cell;\nconst Grid = ({\n  grid,\n  toggleCellState\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-board\",\n  style: {\n    gridTemplateColumns: `repeat(${grid[0].length}, 20px)`\n  },\n  children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n    alive: cell.alive,\n    onClick: () => toggleCellState(i, j)\n  }, `${i}-${j}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this)))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 3\n}, this);\n\n// LivingCellsCounter Component\n_c2 = Grid;\nconst LivingCellsCounter = ({\n  count\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"living-cells-count\",\n  children: [\"Living Cells: \", count]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 3\n}, this);\n\n// ControlPanel Component\n_c3 = LivingCellsCounter;\nconst ControlPanel = ({\n  onStartStop,\n  onNext,\n  onReset,\n  isPlaying\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"buttons-row\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onStartStop,\n    children: isPlaying ? \"Stop\" : \"Autoplay\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onNext,\n    children: \"Next Frame\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onReset,\n    children: \"Reset Grid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 3\n}, this);\n\n// GamePage Component\n_c4 = ControlPanel;\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [inputValues, setInputValues] = useState({\n    rows: '',\n    cols: ''\n  });\n  const {\n    grid,\n    livingCellsCount\n  } = createRandomGrid(defaultSize, defaultSize);\n  const [gridState, setGridState] = useState(grid);\n  const [livingCount, setLivingCount] = useState(livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({\n      ...inputValues,\n      [dimension]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({\n        rows,\n        cols\n      });\n      const newGridData = createRandomGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n  const nextGeneration = useCallback(() => {\n    setGridState(currentGrid => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = {\n                alive: 0,\n                generation: 0\n              };\n            } else {\n              newGrid[i][j] = {\n                ...currentGrid[i][j],\n                generation: currentGrid[i][j].generation + 1\n              };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: 1\n              };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = {\n                ...currentGrid[i][j]\n              };\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize, setGridState]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n  const resetGrid = () => {\n    const {\n      grid,\n      livingCellsCount\n    } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Rows (default size: 20)\",\n          value: inputValues.rows,\n          onChange: e => handleSizeChange(e, 'rows')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Cols (default size: 20)\",\n          value: inputValues.cols,\n          onChange: e => handleSizeChange(e, 'cols')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Grid Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), inputError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: inputError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LivingCellsCounter, {\n      count: livingCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: gridState,\n      toggleCellState: toggleCellState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onStartStop: () => setIsPlaying(!isPlaying),\n      onNext: nextGeneration,\n      onReset: resetGrid,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"cSESYuo6WU2+E3CV/gJJh/w07fc=\");\n_c5 = GamePage;\nexport default GamePage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"LivingCellsCounter\");\n$RefreshReg$(_c4, \"ControlPanel\");\n$RefreshReg$(_c5, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createRandomGrid","grid","livingCellsCount","i","j","isAlive","Math","random","Cell","onClick","className","style","backgroundColor","min","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","toggleCellState","gridTemplateColumns","children","row","cell","_c2","LivingCellsCounter","count","_c3","ControlPanel","onStartStop","onNext","onReset","isPlaying","_c4","GamePage","_s","defaultSize","gridSize","setGridSize","inputValues","setInputValues","gridState","setGridState","livingCount","setLivingCount","inputError","setInputError","setIsPlaying","playRef","current","handleSizeChange","e","dimension","target","value","handleSubmit","preventDefault","parseInt","newGridData","col","newGrid","JSON","parse","stringify","flat","filter","nextGeneration","currentGrid","newLivingCellsCount","liveNeighbors","neighbors","forEach","x","y","interval","setInterval","clearInterval","resetGrid","onSubmit","type","placeholder","onChange","_c5","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\n\n// Helper functions\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = { alive: isAlive, generation: 0 };\n      livingCellsCount += isAlive;\n    }\n  }\n  return { grid, livingCellsCount };\n};\n\n// Cell Component\nconst Cell = ({ alive, onClick }) => (\n  <div\n    onClick={onClick}\n    className={`cell ${alive ? 'alive' : 'dead'}`}\n    style={{ backgroundColor: alive ? `hsl(${Math.min(120, alive * 12)}, 100%, 50%)` : undefined }}\n  />\n);\n\n// Grid Component\nconst Grid = ({ grid, toggleCellState }) => (\n  <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n    {grid.map((row, i) =>\n      row.map((cell, j) => (\n        <Cell key={`${i}-${j}`} alive={cell.alive} onClick={() => toggleCellState(i, j)} />\n      ))\n    )}\n  </div>\n);\n\n// LivingCellsCounter Component\nconst LivingCellsCounter = ({ count }) => (\n  <div className=\"living-cells-count\">Living Cells: {count}</div>\n);\n\n// ControlPanel Component\nconst ControlPanel = ({ onStartStop, onNext, onReset, isPlaying }) => (\n  <div className=\"buttons-row\">\n    <button onClick={onStartStop}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n    <button onClick={onNext}>Next Frame</button>\n    <button onClick={onReset}>Reset Grid</button>\n  </div>\n);\n\n// GamePage Component\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n  const [inputValues, setInputValues] = useState({ rows: '', cols: '' });\n  const { grid, livingCellsCount } = createRandomGrid(defaultSize, defaultSize);\n  const [gridState, setGridState] = useState(grid);\n  const [livingCount, setLivingCount] = useState(livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({ ...inputValues, [dimension]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({ rows, cols });\n      const newGridData = createRandomGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n\n  const nextGeneration = useCallback(() => {\n    setGridState((currentGrid) => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [\n            [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n            [i, j - 1], [i, j + 1],\n            [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n          ];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = { alive: 0, generation: 0 };\n            } else {\n              newGrid[i][j] = { ...currentGrid[i][j], generation: currentGrid[i][j].generation + 1 };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = { alive: 1, generation: 1 };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = { ...currentGrid[i][j] };\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize, setGridState]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n\n  const resetGrid = () => {\n    const { grid, livingCellsCount } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n\n  return (\n    <div className=\"game-page\">\n      <div className=\"form-group\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Rows (default size: 20)\"\n            value={inputValues.rows}\n            onChange={e => handleSizeChange(e, 'rows')}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Cols (default size: 20)\"\n            value={inputValues.cols}\n            onChange={e => handleSizeChange(e, 'cols')}\n          />\n          <button type=\"submit\">Update Grid Size</button>\n        </form>\n        {inputError && <div className=\"error-message\">{inputError}</div>}\n      </div>\n      <LivingCellsCounter count={livingCount} />\n      <Grid grid={gridState} toggleCellState={toggleCellState} />\n      <ControlPanel onStartStop={() => setIsPlaying(!isPlaying)} onNext={nextGeneration} onReset={resetGrid} isPlaying={isPlaying} />\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = {\n        alive: isAlive,\n        generation: isAlive ? 1 : 0\n      }; // Start generation at 1 for alive cells\n      livingCellsCount += isAlive;\n    }\n  }\n  return {\n    grid,\n    livingCellsCount\n  };\n};\nconst Cell = ({\n  cell,\n  onClick\n}) => {\n  const backgroundColor = cell.alive ? `hsl(120, 100%, ${Math.max(50 - cell.generation * 5, 10)}%)` : \"#eee\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: `cell ${cell.alive ? 'alive' : 'dead'}`,\n    style: {\n      backgroundColor\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = Cell;\nconst Grid = ({\n  grid,\n  toggleCellState\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-board\",\n  style: {\n    gridTemplateColumns: `repeat(${grid[0].length}, 20px)`\n  },\n  children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n    cell: cell,\n    onClick: () => toggleCellState(i, j)\n  }, `${i}-${j}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this)))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 3\n}, this);\n_c2 = Grid;\nconst LivingCellsCounter = ({\n  count\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"living-cells-count\",\n  children: [\"Living Cells: \", count]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 3\n}, this);\n_c3 = LivingCellsCounter;\nconst ControlPanel = ({\n  onStartStop,\n  onNext,\n  onReset,\n  isPlaying\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"buttons-row\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onStartStop,\n    children: isPlaying ? \"Stop\" : \"Autoplay\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onNext,\n    children: \"Next Frame\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onReset,\n    children: \"Reset Grid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 3\n}, this);\n_c4 = ControlPanel;\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [inputValues, setInputValues] = useState({\n    rows: '',\n    cols: ''\n  });\n  const newGridData = createRandomGrid(defaultSize, defaultSize);\n  const [gridState, setGridState] = useState(newGridData.grid);\n  const [livingCount, setLivingCount] = useState(newGridData.livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({\n      ...inputValues,\n      [dimension]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({\n        rows,\n        cols\n      });\n      const newGridData = createRandomGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    newGrid[row][col].generation = newGrid[row][col].alive ? 1 : 0; // Reset generation when toggling\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n  const nextGeneration = useCallback(() => {\n    setGridState(currentGrid => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          const cell = currentGrid[i][j];\n          if (cell.alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = {\n                alive: 0,\n                generation: 0\n              };\n            } else {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: cell.generation + 1\n              };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: 1\n              };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = cell;\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(nextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n  const resetGrid = () => {\n    const {\n      grid,\n      livingCellsCount\n    } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Rows (default size: 20)\",\n          value: inputValues.rows,\n          onChange: e => handleSizeChange(e, 'rows')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Cols (default size: 20)\",\n          value: inputValues.cols,\n          onChange: e => handleSizeChange(e, 'cols')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Grid Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), inputError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: inputError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LivingCellsCounter, {\n      count: livingCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: gridState,\n      toggleCellState: toggleCellState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      onStartStop: () => setIsPlaying(!isPlaying),\n      onNext: nextGeneration,\n      onReset: resetGrid,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"rNmAWsfA7IaCodlu+hHiJ9UCBC0=\");\n_c5 = GamePage;\nexport default GamePage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"LivingCellsCounter\");\n$RefreshReg$(_c4, \"ControlPanel\");\n$RefreshReg$(_c5, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createRandomGrid","grid","livingCellsCount","i","j","isAlive","Math","random","Cell","cell","onClick","backgroundColor","max","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","toggleCellState","gridTemplateColumns","children","row","_c2","LivingCellsCounter","count","_c3","ControlPanel","onStartStop","onNext","onReset","isPlaying","_c4","GamePage","_s","defaultSize","gridSize","setGridSize","inputValues","setInputValues","newGridData","gridState","setGridState","livingCount","setLivingCount","inputError","setInputError","setIsPlaying","playRef","current","handleSizeChange","e","dimension","target","value","handleSubmit","preventDefault","parseInt","col","newGrid","JSON","parse","stringify","flat","filter","nextGeneration","currentGrid","newLivingCellsCount","liveNeighbors","neighbors","forEach","x","y","interval","setInterval","clearInterval","resetGrid","onSubmit","type","placeholder","onChange","_c5","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = { alive: isAlive, generation: isAlive ? 1 : 0 }; // Start generation at 1 for alive cells\n      livingCellsCount += isAlive;\n    }\n  }\n  return { grid, livingCellsCount };\n};\n\nconst Cell = ({ cell, onClick }) => {\n  const backgroundColor = cell.alive ? `hsl(120, 100%, ${Math.max(50 - cell.generation * 5, 10)}%)` : \"#eee\";\n  return (\n    <div\n      onClick={onClick}\n      className={`cell ${cell.alive ? 'alive' : 'dead'}`}\n      style={{ backgroundColor }}\n    />\n  );\n};\n\nconst Grid = ({ grid, toggleCellState }) => (\n  <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n    {grid.map((row, i) =>\n      row.map((cell, j) => (\n        <Cell key={`${i}-${j}`} cell={cell} onClick={() => toggleCellState(i, j)} />\n      ))\n    )}\n  </div>\n);\n\nconst LivingCellsCounter = ({ count }) => (\n  <div className=\"living-cells-count\">Living Cells: {count}</div>\n);\n\nconst ControlPanel = ({ onStartStop, onNext, onReset, isPlaying }) => (\n  <div className=\"buttons-row\">\n    <button onClick={onStartStop}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n    <button onClick={onNext}>Next Frame</button>\n    <button onClick={onReset}>Reset Grid</button>\n  </div>\n);\n\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n  const [inputValues, setInputValues] = useState({ rows: '', cols: '' });\n  const newGridData = createRandomGrid(defaultSize, defaultSize);\n  const [gridState, setGridState] = useState(newGridData.grid);\n  const [livingCount, setLivingCount] = useState(newGridData.livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({ ...inputValues, [dimension]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({ rows, cols });\n      const newGridData = createRandomGrid(rows, cols);\n      setGridState(newGridData.grid);\n      setLivingCount(newGridData.livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(gridState));\n    newGrid[row][col].alive = gridState[row][col].alive ? 0 : 1;\n    newGrid[row][col].generation = newGrid[row][col].alive ? 1 : 0; // Reset generation when toggling\n    setGridState(newGrid);\n    setLivingCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n\n  const nextGeneration = useCallback(() => {\n    setGridState((currentGrid) => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i       = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [\n            [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n            [i, j - 1], [i, j + 1],\n            [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n          ];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          const cell = currentGrid[i][j];\n          if (cell.alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = { alive: 0, generation: 0 };\n            } else {\n              newGrid[i][j] = { alive: 1, generation: cell.generation + 1 };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = { alive: 1, generation: 1 };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = cell;\n            }\n          }\n        }\n      }\n      setLivingCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(nextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n\n  const resetGrid = () => {\n    const { grid, livingCellsCount } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGridState(grid);\n    setLivingCount(livingCellsCount);\n  };\n\n  return (\n    <div className=\"game-page\">\n      <div className=\"form-group\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Rows (default size: 20)\"\n            value={inputValues.rows}\n            onChange={e => handleSizeChange(e, 'rows')}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Cols (default size: 20)\"\n            value={inputValues.cols}\n            onChange={e => handleSizeChange(e, 'cols')}\n          />\n          <button type=\"submit\">Update Grid Size</button>\n        </form>\n        {inputError && <div className=\"error-message\">{inputError}</div>}\n      </div>\n      <LivingCellsCounter count={livingCount} />\n      <Grid grid={gridState} toggleCellState={toggleCellState} />\n      <ControlPanel onStartStop={() => setIsPlaying(!isPlaying)} onNext={nextGeneration} onReset={resetGrid} isPlaying={isPlaying} />\n    </div>\n  );\n};\n\nexport default GamePage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
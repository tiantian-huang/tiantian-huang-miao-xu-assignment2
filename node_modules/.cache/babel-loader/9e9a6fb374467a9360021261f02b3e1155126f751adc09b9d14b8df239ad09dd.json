{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createClusteredGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  // Adjust the number of clusters and the cluster size if needed\n  const clusters = Math.floor(rows * cols * 0.05); // 5% of the total cells as cluster centers\n\n  for (let i = 0; i < clusters; i++) {\n    const centerRow = Math.floor(Math.random() * rows);\n    const centerCol = Math.floor(Math.random() * cols);\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        const newRow = centerRow + dx;\n        const newCol = centerCol + dy;\n        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\n          grid[newRow][newCol] = {\n            alive: 1,\n            generation: 1\n          };\n        }\n      }\n    }\n  }\n  return grid;\n};\nconst Cell = ({\n  alive,\n  generation,\n  toggle\n}) => {\n  const colorIntensity = Math.min(100, generation * 20); // Increase intensity with generation\n  const backgroundColor = alive ? `hsl(330, 100%, ${colorIntensity}%)` : '#eee';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cell ${alive ? 'alive' : ''}`,\n    style: {\n      backgroundColor\n    },\n    onClick: toggle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = Cell;\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [grid, setGrid] = useState(createClusteredGrid(defaultSize, defaultSize));\n  const [isPlaying, setIsPlaying] = useState(false);\n  const toggleCellState = (rowIndex, colIndex) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[rowIndex][colIndex].alive = !newGrid[rowIndex][colIndex].alive;\n    newGrid[rowIndex][colIndex].generation = newGrid[rowIndex][colIndex].alive ? 1 : 0;\n    setGrid(newGrid);\n  };\n  const calculateNextGeneration = useCallback(() => {\n    const nextGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n    for (let row = 0; row < gridSize.rows; row++) {\n      for (let col = 0; col < gridSize.cols; col++) {\n        const cell = grid[row][col];\n        let neighbors = 0;\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            if (i === 0 && j === 0) continue; // Skip the cell itself\n            const x = row + i,\n              y = col + j;\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols && grid[x][y].alive) {\n              neighbors++;\n            }\n          }\n        }\n        const alive = cell.alive;\n        if (alive && (neighbors < 2 || neighbors > 3)) {\n          nextGrid[row][col] = {\n            alive: 0,\n            generation: 0\n          };\n        } else if (!alive && neighbors === 3) {\n          nextGrid[row][col] = {\n            alive: 1,\n            generation: 1\n          };\n        } else {\n          nextGrid[row][col] = {\n            alive: cell.alive,\n            generation: cell.generation + (cell.alive ? 1 : 0)\n          };\n        }\n      }\n    }\n    setGrid(nextGrid);\n  }, [grid, gridSize]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(calculateNextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, calculateNextGeneration]);\n  const handleReset = () => {\n    setGrid(createClusteredGrid(defaultSize, defaultSize));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsPlaying(!isPlaying),\n      children: isPlaying ? \"Pause\" : \"Autoplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateNextGeneration,\n      children: \"Next Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridSize.cols}, 20px)`\n      },\n      children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        alive: cell.alive,\n        generation: cell.generation,\n        toggle: () => toggleCellState(rowIndex, colIndex)\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"3V+L6SOQo93RFF7lSxAbcrCfgHU=\");\n_c2 = GamePage;\nexport default GamePage;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createClusteredGrid","grid","clusters","Math","floor","i","centerRow","random","centerCol","dx","dy","newRow","newCol","Cell","toggle","colorIntensity","min","backgroundColor","className","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","GamePage","_s","defaultSize","gridSize","setGridSize","setGrid","isPlaying","setIsPlaying","toggleCellState","rowIndex","colIndex","newGrid","JSON","parse","stringify","calculateNextGeneration","nextGrid","row","col","cell","neighbors","j","x","y","interval","setInterval","clearInterval","handleReset","children","display","gridTemplateColumns","_c2","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport './GamePage.css';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createClusteredGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  // Adjust the number of clusters and the cluster size if needed\n  const clusters = Math.floor(rows * cols * 0.05); // 5% of the total cells as cluster centers\n\n  for (let i = 0; i < clusters; i++) {\n    const centerRow = Math.floor(Math.random() * rows);\n    const centerCol = Math.floor(Math.random() * cols);\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        const newRow = centerRow + dx;\n        const newCol = centerCol + dy;\n        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\n          grid[newRow][newCol] = { alive: 1, generation: 1 };\n        }\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst Cell = ({ alive, generation, toggle }) => {\n  const colorIntensity = Math.min(100, generation * 20); // Increase intensity with generation\n  const backgroundColor = alive ? `hsl(330, 100%, ${colorIntensity}%)` : '#eee';\n  return (\n    <div\n      className={`cell ${alive ? 'alive' : ''}`}\n      style={{ backgroundColor }}\n      onClick={toggle}\n    ></div>\n  );\n};\n\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n  const [grid, setGrid] = useState(createClusteredGrid(defaultSize, defaultSize));\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const toggleCellState = (rowIndex, colIndex) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[rowIndex][colIndex].alive = !newGrid[rowIndex][colIndex].alive;\n    newGrid[rowIndex][colIndex].generation = newGrid[rowIndex][colIndex].alive ? 1 : 0;\n    setGrid(newGrid);\n  };\n\n  const calculateNextGeneration = useCallback(() => {\n    const nextGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n\n    for (let row = 0; row < gridSize.rows; row++) {\n      for (let col = 0; col < gridSize.cols; col++) {\n        const cell = grid[row][col];\n        let neighbors = 0;\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            if (i === 0 && j === 0) continue; // Skip the cell itself\n            const x = row + i, y = col + j;\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols && grid[x][y].alive) {\n              neighbors++;\n            }\n          }\n        }\n\n        const alive = cell.alive;\n        if (alive && (neighbors < 2 || neighbors > 3)) {\n          nextGrid[row][col] = { alive: 0, generation: 0 };\n        } else if (!alive && neighbors === 3) {\n          nextGrid[row][col] = { alive: 1, generation: 1 };\n        } else {\n          nextGrid[row][col] = { alive: cell.alive, generation: cell.generation + (cell.alive ? 1 : 0) };\n        }\n      }\n    }\n\n    setGrid(nextGrid);\n  }, [grid, gridSize]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(calculateNextGeneration, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, calculateNextGeneration]);\n\n  const handleReset = () => {\n    setGrid(createClusteredGrid(defaultSize, defaultSize));\n  };\n\n  return (\n    <div className=\"game-container\">\n      <button onClick={() => setIsPlaying(!isPlaying)}>{isPlaying ? \"Pause\" : \"Autoplay\"}</button>\n      <button onClick={calculateNextGeneration}>Next Generation</button>\n      <button onClick={handleReset}>Reset</button>\n      <div style={{ display: 'grid', gridTemplateColumns: `repeat(${gridSize.cols}, 20px)` }}>\n        {grid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => (\n            <Cell\n              key={`${rowIndex}-${colIndex}`}\n              alive={cell.alive}\n              generation={cell.generation}\n              toggle={() => toggleCellState(rowIndex, colIndex)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j] = {\n        alive: Math.random() < 0.05 ? 1 : 0,\n        generation: 0\n      };\n    }\n  }\n  return grid;\n};\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [inputValues, setInputValues] = useState({\n    rows: '',\n    cols: ''\n  });\n  const [grid, setGrid] = useState(() => createRandomGrid(defaultSize, defaultSize));\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({\n      ...inputValues,\n      [dimension]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({\n        rows,\n        cols\n      });\n      setGrid(createRandomGrid(rows, cols));\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].alive = grid[row][col].alive ? 0 : 1;\n    setGrid(newGrid);\n  };\n  const nextGeneration = useCallback(() => {\n    setGrid(currentGrid => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          // Define neighbor positions\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n          // Count live neighbors\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          // Apply game rules to determine if the cell should be alive or dead\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = {\n                alive: 0,\n                generation: 0\n              };\n            } else {\n              newGrid[i][j] = {\n                ...currentGrid[i][j],\n                generation: currentGrid[i][j].generation + 1\n              };\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: 1\n              };\n            } else {\n              newGrid[i][j] = currentGrid[i][j];\n            }\n          }\n        }\n      }\n      return newGrid;\n    });\n  }, [gridSize.rows, gridSize.cols, setGrid]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n  const resetGrid = () => {\n    setGrid(createRandomGrid(gridSize.rows, gridSize.cols));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Rows (defualt size: 20)\",\n        value: inputValues.rows,\n        onChange: e => handleSizeChange(e, 'rows')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Cols (defualt size: 20)\",\n        value: inputValues.cols,\n        onChange: e => handleSizeChange(e, 'cols')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Grid Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), inputError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: inputError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        gridTemplateColumns: `repeat(${gridSize.cols}, 20px)`\n      },\n      children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleCellState(i, j),\n        className: `cell ${cell.alive ? 'alive' : 'dead'}`,\n        style: {\n          backgroundColor: cell.alive ? `hsl(${Math.min(120, cell.generation * 12)}, 100%, 50%)` : undefined\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsPlaying(!isPlaying),\n      children: isPlaying ? \"Stop\" : \"Autoplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextGeneration,\n      children: \"Next Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGrid,\n      children: \"Reset Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"xlyPZDpQlbacr8YZEpGJtFEFDmI=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createRandomGrid","grid","i","j","Math","random","GamePage","_s","defaultSize","gridSize","setGridSize","inputValues","setInputValues","setGrid","inputError","setInputError","isPlaying","setIsPlaying","playRef","current","handleSizeChange","e","dimension","target","value","handleSubmit","preventDefault","parseInt","toggleCellState","row","col","newGrid","JSON","parse","stringify","nextGeneration","currentGrid","liveNeighbors","neighbors","forEach","x","y","interval","setInterval","clearInterval","resetGrid","className","children","onSubmit","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","cell","onClick","backgroundColor","min","undefined","_c","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j] = { alive: Math.random() < 0.05 ? 1 : 0, generation: 0 };\n    }\n  }\n  return grid;\n};\n\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n  const [inputValues, setInputValues] = useState({ rows: '', cols: '' });\n  const [grid, setGrid] = useState(() => createRandomGrid(defaultSize, defaultSize));\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({ ...inputValues, [dimension]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({ rows, cols });\n      setGrid(createRandomGrid(rows, cols));\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].alive = grid[row][col].alive ? 0 : 1;\n    setGrid(newGrid);\n  };\n\n  const nextGeneration = useCallback(() => {\n    setGrid((currentGrid) => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          // Define neighbor positions\n          const neighbors = [\n            [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n            [i, j - 1],               [i, j + 1],\n            [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n          ];\n          // Count live neighbors\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          // Apply game rules to determine if the cell should be alive or dead\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = { alive: 0, generation: 0 };\n            } else {\n              newGrid[i][j] = { ...currentGrid[i][j], generation: currentGrid[i][j].generation + 1 };\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = { alive: 1, generation: 1 };\n            } else {\n              newGrid[i][j] = currentGrid[i][j];\n            }\n          }\n        }\n      }\n      return newGrid;\n    });\n  }, [gridSize.rows, gridSize.cols, setGrid]);\n  \n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n\n  const resetGrid = () => {\n    setGrid(createRandomGrid(gridSize.rows, gridSize.cols));\n  };\n\n  return (\n    <div className=\"game-page\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Rows (defualt size: 20)\"\n          value={inputValues.rows}\n          onChange={e => handleSizeChange(e, 'rows')}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Cols (defualt size: 20)\"\n          value={inputValues.cols}\n          onChange={e => handleSizeChange(e, 'cols')}\n        />\n        <button type=\"submit\">Update Grid Size</button>\n      </form>\n      {inputError && <div className=\"error-message\">{inputError}</div>}\n      <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${gridSize.cols}, 20px)` }}>\n        {grid.map((row, i) =>\n          row.map((cell, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => toggleCellState(i, j)}\n              className={`cell ${cell.alive ? 'alive' : 'dead'}`}\n              style={{ backgroundColor: cell.alive ? `hsl(${Math.min(120, cell.generation * 12)}, 100%, 50%)` : undefined }}\n            />\n          ))\n        )}\n      </div>\n      <button onClick={() => setIsPlaying(!isPlaying)}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n      <button onClick={nextGeneration}>Next Generation</button>\n      <button onClick={resetGrid}>Reset Grid</button>\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
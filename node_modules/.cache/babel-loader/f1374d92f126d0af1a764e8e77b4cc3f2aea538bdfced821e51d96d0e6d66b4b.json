{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createClusteredGrid = (rows, cols) => {\n  let grid = createEmptyGrid(rows, cols);\n  const clusterCenters = Math.floor(rows * cols * 0.05); // About 5% of the grid\n\n  for (let n = 0; n < clusterCenters; n++) {\n    let row = Math.floor(Math.random() * rows);\n    let col = Math.floor(Math.random() * cols);\n    grid[row][col] = {\n      alive: 1,\n      generation: 1\n    }; // Start generation at 1 for alive cells\n    // Create a small cluster around this cell\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        if (i === 0 && j === 0) continue; // Skip the center cell\n        const newRow = row + i;\n        const newCol = col + j;\n        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\n          grid[newRow][newCol] = Math.random() > 0.7 ? {\n            alive: 1,\n            generation: 1\n          } : grid[newRow][newCol];\n        }\n      }\n    }\n  }\n  return grid;\n};\nconst Cell = ({\n  cell,\n  onClick\n}) => {\n  const hue = 330; // Base hue for #e0b1cb\n  const saturation = 100;\n  const lightness = 70 - cell.generation * 10; // Darken with each generation\n  const backgroundColor = cell.alive ? `hsl(${hue}, ${saturation}%, ${Math.max(lightness, 20)}%)` : \"#eee\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: `cell ${cell.alive ? 'alive' : 'dead'}`,\n    style: {\n      backgroundColor\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_c = Cell;\nconst Grid = ({\n  grid,\n  toggleCellState\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-board\",\n  style: {\n    gridTemplateColumns: `repeat(${grid[0].length}, 20px)`\n  },\n  children: grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n    cell: cell,\n    onClick: () => toggleCellState(rowIndex, colIndex)\n  }, `${rowIndex}-${colIndex}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this)))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 3\n}, this);\n_c2 = Grid;\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [grid, setGrid] = useState(createClusteredGrid(defaultSize, defaultSize));\n  const toggleCellState = useCallback((row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = {\n      ...newGrid[row][col],\n      alive: newGrid[row][col].alive ? 0 : 1,\n      generation: newGrid[row][col].alive ? 0 : newGrid[row][col].generation + 1\n    };\n    setGrid(newGrid);\n  }, [grid]);\n  const nextGeneration = useCallback(() => {\n    const newGrid = grid.map((row, rowIndex) => row.map((cell, colIndex) => {\n      const neighbors = [[rowIndex - 1, colIndex - 1], [rowIndex - 1, colIndex], [rowIndex - 1, colIndex + 1], [rowIndex, colIndex - 1], [rowIndex, colIndex + 1], [rowIndex + 1, colIndex - 1], [rowIndex + 1, colIndex], [rowIndex + 1, colIndex + 1]];\n      const aliveNeighbors = neighbors.reduce((acc, [i, j]) => {\n        if (i >= 0 && i < defaultSize && j >= 0 && j < defaultSize && grid[i][j].alive) {\n          acc += 1;\n        }\n        return acc;\n      }, 0);\n      if (cell.alive && (aliveNeighbors < 2 || aliveNeighbors > 3)) {\n        return {\n          alive: 0,\n          generation: 0\n        };\n      }\n      if (!cell.alive && aliveNeighbors === 3) {\n        return {\n          alive: 1,\n          generation: 1\n        };\n      }\n      return cell.alive ? {\n        ...cell,\n        generation: cell.generation + 1\n      } : cell;\n    }));\n    setGrid(newGrid);\n  }, [grid]);\n  useEffect(() => {\n    let interval;\n    if (isPlaying) {\n      interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n    }\n    return () => clearInterval(interval);\n  }, [isPlaying, nextGeneration]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const startStopGame = () => {\n    setIsPlaying(!isPlaying);\n  };\n  const resetGame = () => {\n    setGrid(createClusteredGrid(defaultSize, defaultSize));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startStopGame,\n      children: isPlaying ? \"Stop\" : \"Autoplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextGeneration,\n      children: \"Next Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"Reset Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        grid: grid,\n        toggleCellState: toggleCellState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"g7FAzFC5TeeK0DRiJ9Ct0RJZjzI=\");\n_c3 = GamePage;\nexport default GamePage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createClusteredGrid","grid","clusterCenters","Math","floor","n","row","random","col","i","j","newRow","newCol","Cell","cell","onClick","hue","saturation","lightness","backgroundColor","max","className","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","toggleCellState","gridTemplateColumns","children","rowIndex","colIndex","_c2","GamePage","_s","defaultSize","setGrid","newGrid","nextGeneration","neighbors","aliveNeighbors","reduce","acc","interval","isPlaying","setInterval","clearInterval","setIsPlaying","startStopGame","resetGame","_c3","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport './GamePage.css';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createClusteredGrid = (rows, cols) => {\n  let grid = createEmptyGrid(rows, cols);\n  const clusterCenters = Math.floor((rows * cols) * 0.05); // About 5% of the grid\n  \n  for (let n = 0; n < clusterCenters; n++) {\n    let row = Math.floor(Math.random() * rows);\n    let col = Math.floor(Math.random() * cols);\n    grid[row][col] = { alive: 1, generation: 1 }; // Start generation at 1 for alive cells\n    // Create a small cluster around this cell\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        if (i === 0 && j === 0) continue; // Skip the center cell\n        const newRow = row + i;\n        const newCol = col + j;\n        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {\n          grid[newRow][newCol] = Math.random() > 0.7 ? { alive: 1, generation: 1 } : grid[newRow][newCol];\n        }\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst Cell = ({ cell, onClick }) => {\n  const hue = 330; // Base hue for #e0b1cb\n  const saturation = 100;\n  const lightness = 70 - cell.generation * 10; // Darken with each generation\n  const backgroundColor = cell.alive ? `hsl(${hue}, ${saturation}%, ${Math.max(lightness, 20)}%)` : \"#eee\";\n  \n  return (\n    <div\n      onClick={onClick}\n      className={`cell ${cell.alive ? 'alive' : 'dead'}`}\n      style={{ backgroundColor }}\n    />\n  );\n};\n\nconst Grid = ({ grid, toggleCellState }) => (\n  <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${grid[0].length}, 20px)` }}>\n    {grid.map((row, rowIndex) =>\n      row.map((cell, colIndex) => (\n        <Cell key={`${rowIndex}-${colIndex}`} cell={cell} onClick={() => toggleCellState(rowIndex, colIndex)} />\n      ))\n    )}\n  </div>\n);\n\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [grid, setGrid] = useState(createClusteredGrid(defaultSize, defaultSize));\n\n  const toggleCellState = useCallback((row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = {\n      ...newGrid[row][col],\n      alive: newGrid[row][col].alive ? 0 : 1,\n      generation: newGrid[row][col].alive ? 0 : newGrid[row][col].generation + 1,\n    };\n    setGrid(newGrid);\n  }, [grid]);\n\n  const nextGeneration = useCallback(() => {\n    const newGrid = grid.map((row, rowIndex) =>\n      row.map((cell, colIndex) => {\n        const neighbors = [\n          [rowIndex - 1, colIndex - 1], [rowIndex - 1, colIndex], [rowIndex - 1, colIndex + 1],\n          [rowIndex, colIndex - 1],                             [rowIndex, colIndex + 1],\n          [rowIndex + 1, colIndex - 1], [rowIndex + 1, colIndex], [rowIndex + 1, colIndex + 1]\n        ];\n        const aliveNeighbors = neighbors.reduce((acc, [i, j]) => {\n          if (i >= 0 && i < defaultSize && j >= 0 && j < defaultSize && grid[i][j].alive) {\n            acc += 1;\n          }\n          return acc;\n        }, 0);\n\n        if (cell.alive && (aliveNeighbors < 2 || aliveNeighbors > 3)) {\n          return { alive: 0, generation: 0 };\n        }\n        if (!cell.alive && aliveNeighbors === 3) {\n          return { alive: 1, generation: 1 };\n        }\n        return cell.alive ? { ...cell, generation: cell.generation + 1 } : cell;\n        })\n        );\n        setGrid(newGrid);\n        }, [grid]);\n        \n        useEffect(() => {\n        let interval;\n        if (isPlaying) {\n        interval = setInterval(() => {\n        nextGeneration();\n        }, 100);\n        }\n        return () => clearInterval(interval);\n        }, [isPlaying, nextGeneration]);\n        \n        const [isPlaying, setIsPlaying] = useState(false);\n        \n        const startStopGame = () => {\n        setIsPlaying(!isPlaying);\n        };\n        \n        const resetGame = () => {\n        setGrid(createClusteredGrid(defaultSize, defaultSize));\n        };\n        \n        return (\n        <div className=\"game-page\">\n        <button onClick={startStopGame}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n        <button onClick={nextGeneration}>Next Generation</button>\n        <button onClick={resetGame}>Reset Grid</button>\n        <div className=\"grid-container\">\n        <Grid grid={grid} toggleCellState={toggleCellState} />\n        </div>\n        </div>\n        );\n        };\n        \n        export default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
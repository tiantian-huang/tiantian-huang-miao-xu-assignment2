{"ast":null,"code":"var _jsxFileName = \"/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({\n    length: rows\n  }).map(() => Array.from({\n    length: cols\n  }).fill({\n    alive: 0,\n    generation: 0\n  }));\n};\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = {\n        alive: isAlive,\n        generation: 0\n      };\n      livingCellsCount += isAlive;\n    }\n  }\n  return {\n    grid,\n    livingCellsCount\n  };\n};\nconst GamePage = () => {\n  _s();\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({\n    rows: defaultSize,\n    cols: defaultSize\n  });\n  const [inputValues, setInputValues] = useState({\n    rows: '',\n    cols: ''\n  });\n  const [grid, setGrid] = useState(() => createRandomGrid(defaultSize, defaultSize).grid);\n  const [livingCellsCount, setLivingCellsCount] = useState(createRandomGrid(defaultSize, defaultSize).livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({\n      ...inputValues,\n      [dimension]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({\n        rows,\n        cols\n      });\n      const {\n        grid,\n        livingCellsCount\n      } = createRandomGrid(rows, cols);\n      setGrid(grid);\n      setLivingCellsCount(livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].alive = grid[row][col].alive ? 0 : 1;\n    setGrid(newGrid);\n    setLivingCellsCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n  const nextGeneration = useCallback(() => {\n    setGrid(currentGrid => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = {\n                alive: 0,\n                generation: 0\n              };\n            } else {\n              newGrid[i][j] = {\n                ...currentGrid[i][j],\n                generation: currentGrid[i][j].generation + 1\n              };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = {\n                alive: 1,\n                generation: 1\n              };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = {\n                ...currentGrid[i][j]\n              };\n            }\n          }\n        }\n      }\n      setLivingCellsCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize.rows, gridSize.cols, setGrid]);\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n  const resetGrid = () => {\n    const {\n      grid,\n      livingCellsCount\n    } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGrid(grid);\n    setLivingCellsCount(livingCellsCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Rows (default size: 20)\",\n        value: inputValues.rows,\n        onChange: e => handleSizeChange(e, 'rows')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Cols (default size: 20)\",\n        value: inputValues.cols,\n        onChange: e => handleSizeChange(e, 'cols')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Grid Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), inputError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: inputError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        gridTemplateColumns: `repeat(${gridSize.cols}, 20px)`\n      },\n      children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleCellState(i, j),\n        className: `cell ${cell.alive ? 'alive' : 'dead'}`,\n        style: {\n          backgroundColor: cell.alive ? `hsl(${Math.min(120, cell.generation * 12)}, 100%, 50%)` : undefined\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsPlaying(!isPlaying),\n      children: isPlaying ? \"Stop\" : \"Autoplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextGeneration,\n      children: \"Next Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGrid,\n      children: \"Reset Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Living Cells: \", livingCellsCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"DsMl+cJv96suhZbpQyCOwaHUXVQ=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","map","fill","alive","generation","createRandomGrid","grid","livingCellsCount","i","j","isAlive","Math","random","GamePage","_s","defaultSize","gridSize","setGridSize","inputValues","setInputValues","setGrid","setLivingCellsCount","inputError","setInputError","isPlaying","setIsPlaying","playRef","current","handleSizeChange","e","dimension","target","value","handleSubmit","preventDefault","parseInt","toggleCellState","row","col","newGrid","JSON","parse","stringify","flat","filter","cell","nextGeneration","currentGrid","newLivingCellsCount","liveNeighbors","neighbors","forEach","x","y","interval","setInterval","clearInterval","resetGrid","className","children","onSubmit","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","onClick","backgroundColor","min","undefined","_c","$RefreshReg$"],"sources":["/Users/huangtiantian/Desktop/5610/project2/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport './GamePage.css';\n\nconst createEmptyGrid = (rows, cols) => {\n  return Array.from({ length: rows }).map(() => Array.from({ length: cols }).fill({ alive: 0, generation: 0 }));\n};\n\nconst createRandomGrid = (rows, cols) => {\n  const grid = createEmptyGrid(rows, cols);\n  let livingCellsCount = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const isAlive = Math.random() < 0.05 ? 1 : 0;\n      grid[i][j] = { alive: isAlive, generation: 0 };\n      livingCellsCount += isAlive;\n    }\n  }\n  return { grid, livingCellsCount };\n};\n\nconst GamePage = () => {\n  const defaultSize = 20;\n  const [gridSize, setGridSize] = useState({ rows: defaultSize, cols: defaultSize });\n  const [inputValues, setInputValues] = useState({ rows: '', cols: '' });\n  const [grid, setGrid] = useState(() => createRandomGrid(defaultSize, defaultSize).grid);\n  const [livingCellsCount, setLivingCellsCount] = useState(createRandomGrid(defaultSize, defaultSize).livingCellsCount);\n  const [inputError, setInputError] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playRef = useRef(isPlaying);\n  playRef.current = isPlaying;\n\n  const handleSizeChange = (e, dimension) => {\n    setInputValues({ ...inputValues, [dimension]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const rows = parseInt(inputValues.rows, 10) || defaultSize;\n    const cols = parseInt(inputValues.cols, 10) || defaultSize;\n    if (rows >= 3 && rows <= 40 && cols >= 3 && cols <= 40) {\n      setGridSize({ rows, cols });\n      const { grid, livingCellsCount } = createRandomGrid(rows, cols);\n      setGrid(grid);\n      setLivingCellsCount(livingCellsCount);\n      setInputError('');\n    } else {\n      setInputError('Please enter numbers between 3 and 40 for both rows and cols.');\n    }\n  };\n\n  const toggleCellState = (row, col) => {\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].alive = grid[row][col].alive ? 0 : 1;\n    setGrid(newGrid);\n    setLivingCellsCount(newGrid.flat().filter(cell => cell.alive).length);\n  };\n\n  const nextGeneration = useCallback(() => {\n    setGrid((currentGrid) => {\n      const newGrid = createEmptyGrid(gridSize.rows, gridSize.cols);\n      let newLivingCellsCount = 0;\n      for (let i = 0; i < gridSize.rows; i++) {\n        for (let j = 0; j < gridSize.cols; j++) {\n          let liveNeighbors = 0;\n          const neighbors = [\n            [i - 1, j - 1], [i - 1, j], [i - 1, j + 1],\n            [i, j - 1], [i, j + 1],\n            [i + 1, j - 1], [i + 1, j], [i + 1, j + 1],\n          ];\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < gridSize.rows && y >= 0 && y < gridSize.cols) {\n              liveNeighbors += currentGrid[x][y].alive;\n            }\n          });\n          if (currentGrid[i][j].alive) {\n            if (liveNeighbors < 2 || liveNeighbors > 3) {\n              newGrid[i][j] = { alive: 0, generation: 0 };\n            } else {\n              newGrid[i][j] = { ...currentGrid[i][j], generation: currentGrid[i][j].generation + 1 };\n              newLivingCellsCount++;\n            }\n          } else {\n            if (liveNeighbors === 3) {\n              newGrid[i][j] = { alive: 1, generation: 1 };\n              newLivingCellsCount++;\n            } else {\n              newGrid[i][j] = { ...currentGrid[i][j] };\n            }\n          }\n        }\n      }\n      setLivingCellsCount(newLivingCellsCount);\n      return newGrid;\n    });\n  }, [gridSize.rows, gridSize.cols, setGrid]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        nextGeneration();\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, nextGeneration]);\n\n  const resetGrid = () => {\n    const { grid, livingCellsCount } = createRandomGrid(gridSize.rows, gridSize.cols);\n    setGrid(grid);\n    setLivingCellsCount(livingCellsCount);\n  };\n\n  return (\n    <div className=\"game-page\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Rows (default size: 20)\"\n          value={inputValues.rows}\n          onChange={e => handleSizeChange(e, 'rows')}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Cols (default size: 20)\"\n          value={inputValues.cols}\n          onChange={e => handleSizeChange(e, 'cols')}\n        />\n        <button type=\"submit\">Update Grid Size</button>\n      </form>\n      {inputError && <div className=\"error-message\">{inputError}</div>}\n      <div className=\"game-board\" style={{ gridTemplateColumns: `repeat(${gridSize.cols}, 20px)` }}>\n        {grid.map((row, i) =>\n          row.map((cell, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => toggleCellState(i, j)}\n              className={`cell ${cell.alive ? 'alive' : 'dead'}`}\n              style={{ backgroundColor: cell.alive ? `hsl(${Math.min(120, cell.generation * 12)}, 100%, 50%)` : undefined }}\n            />\n          ))\n        )}\n      </div>\n      <button onClick={() => setIsPlaying(!isPlaying)}>{isPlaying ? \"Stop\" : \"Autoplay\"}</button>\n      <button onClick={nextGeneration}>Next Generation</button>\n      <button onClick={resetGrid}>Reset Grid</button>\n      <div>Living Cells: {livingCellsCount}</div>\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}